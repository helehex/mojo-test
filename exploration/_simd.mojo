fn main():
    bitwidths()
    simdwidths()
    
fn bitwidths():
    print()
    print("#------ bit widths ------#")
    print("invalid  :", bitwidthof[DType.invalid]())
    print("bool     :", bitwidthof[DType.bool]())
    print("int8     :", bitwidthof[DType.int8]())
    print("uint8    :", bitwidthof[DType.uint8]())
    print("int16    :", bitwidthof[DType.int16]())
    print("uint16   :", bitwidthof[DType.uint16]())
    print("int32    :", bitwidthof[DType.int32]())
    print("uint32   :", bitwidthof[DType.uint32]())
    print("int64    :", bitwidthof[DType.int64]())
    print("uint64   :", bitwidthof[DType.uint64]())
    print("bfloat16 :", bitwidthof[DType.bfloat16]())
    print("float16  :", bitwidthof[DType.float16]())
    print("float32  :", bitwidthof[DType.float32]())
    print("float64  :", bitwidthof[DType.float64]())
    print("index    :", bitwidthof[DType.index]())
    print("address  :", bitwidthof[DType.address]())
    print()

fn simdwidths():
    print()
    print("#------ simd widths ------#")
    print("invalid  :", simdwidthof[DType.invalid]())
    print("bool     :", simdwidthof[DType.bool]())
    print("int8     :", simdwidthof[DType.int8]())
    print("uint8    :", simdwidthof[DType.uint8]())
    print("int16    :", simdwidthof[DType.int16]())
    print("uint16   :", simdwidthof[DType.uint16]())
    print("int32    :", simdwidthof[DType.int32]())
    print("uint32   :", simdwidthof[DType.uint32]())
    print("int64    :", simdwidthof[DType.int64]())
    print("uint64   :", simdwidthof[DType.uint64]())
    print("bfloat16 :", simdwidthof[DType.bfloat16]())
    print("float16  :", simdwidthof[DType.float16]())
    print("float32  :", simdwidthof[DType.float32]())
    print("float64  :", simdwidthof[DType.float64]())
    print("index    :", simdwidthof[DType.index]())
    print("address  :", simdwidthof[DType.address]())
    print()